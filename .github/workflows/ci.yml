name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  custom-plugin:
    runs-on: ubuntu-latest
    outputs:
      plugin: ${{ steps.plugin.outputs.plugin }}
    steps:
      - id: plugin
        name: plugin
        shell: bash
        run: |
          echo "plugin={'plugin': ['plugin1', 'plugin2']}"
          echo "plugin={'plugin': ['plugin1', 'plugin2']}" >> $GITHUB_OUTPUT
  custom-input:
    needs: custom-plugin
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.custom-plugin.outputs.plugin) }}
    outputs:
      matrix: ${{ steps.matrix-output.outputs.matrix }}
    steps:
      - id: matrix-output
        name: matrix-output
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "matrix={'plugin': ['plugin1', 'plugin2'], 'version': ['0.1.0', '0.2.0']}" # debug
            echo "matrix={'plugin': ['plugin1', 'plugin2'], 'version': ['0.1.0', '0.2.0']}" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "matrix={'plugin': [${{ matrix.plugin }}], 'version': ['0.1.0', '0.2.0']}"
          echo "matrix={'plugin': [${{ matrix.plugin }}], 'version': ['0.1.0', '0.2.0']}" >> $GITHUB_OUTPUT
  debug:
    needs: custom-input
    runs-on: ubuntu-latest
    # if: ${{ toJson(fromJson(needs.custom-input.outputs.matrix).version) != '[]' }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.custom-input.outputs.matrix) }}
    steps:
      - shell: bash
        run: |
          echo "Raw json"
          echo ${{ needs.custom-input.outputs.matrix }}
      - shell: bash
        run: |
          echo "Parsed json"
          echo ${{ fromJson(needs.custom-input.outputs.matrix) }}
      - shell: bash
        run: |
          echo "Current plugin and version"
          echo ${{ matrix.plugin }}
          echo ${{ matrix.version }}
      - shell: bash
        run: |
          echo "Plugin length"
          echo "is equal = ${{ toJson(fromJson(needs.custom-input.outputs.matrix).version) == '["0.1.0", "0.2.0"]' }}"
  prepare-lint:
    needs: debug
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          requirements-file: core/requirements-dev.txt
          setup: true
  lint:
    needs: prepare-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          requirements-file: core/requirements-dev.txt
      - name: Check code formatting
        run: python -m black --check core/

  prepare-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          requirements-file: core/requirements-test.txt
          setup: true

  test:
    needs: prepare-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          requirements-file: core/requirements-test.txt
          setup: false
      - name: Run tests
        run: python -m pytest tests/

  prepare-package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          requirements-file: core/requirements.txt
          setup: true

  package:
    needs: prepare-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          requirements-file: core/requirements.txt
      - name: Just packaging
        run: echo "Packaging done"
